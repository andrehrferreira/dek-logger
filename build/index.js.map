{"version":3,"sources":["../src/index.js"],"names":["BugsnagTransport","opts","silent","level","Bugsnag","start","apiKey","process","env","LOGGER_BUGSNAG_API_KEY","plugins","BugsnagPluginExpress","info","callback","setImmediate","emit","Error","notify","message","Transport","logger","winston","createLogger","format","json","NODE_ENV","add","transports","Console","simple","consoleWarnLevels","Object","prototype","hasOwnProperty","call","console","log","$","set","getPlugin","e"],"mappings":"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","sourcesContent":["import winston from \"winston\";\nimport Bugsnag from \"@bugsnag/js\";\nimport Transport from \"winston-transport\";\nimport BugsnagPluginExpress from \"@bugsnag/plugin-express\";\nimport { $ } from \"@dekproject/scope\";\nclass BugsnagTransport extends Transport {\n    constructor(opts) {\n        super(opts);\n        this.silent = opts && opts.silent || false;\n        this.level = opts && opts.level || \"silly\";\n        Bugsnag.start({\n            apiKey: process.env.LOGGER_BUGSNAG_API_KEY,\n            plugins: [BugsnagPluginExpress]\n        });\n    }\n    log (info, callback) {\n        setImmediate(() => this.emit(\"logged\", info));\n        if (this.silent) {\n            if (typeof callback == \"function\") return callback();\n            return;\n        }\n        if (info instanceof Error) {\n            Bugsnag.notify(info);\n        } else if (typeof info.message == \"string\") {\n            Bugsnag.notify(new Error(info.message));\n        }\n        if (typeof callback == \"function\") return callback();\n        return;\n    }\n}\n\nexport default async () => {\n    try {\n        let logger = logger = winston.createLogger({\n            level: \"info\",\n            format: winston.format.json()\n        });\n        if (process.env.NODE_ENV == \"production\") {\n            logger.add(new winston.transports.Console({\n                format: winston.format.simple(),\n                consoleWarnLevels: [\"warn\", \"info\", \"error\"]\n            }));\n        }\n        else {\n            logger.add(new winston.transports.Console({\n                format: winston.format.simple(),\n                level: \"debug\"\n            }));\n        }\n        if (!Object.prototype.hasOwnProperty.call(process.env, \"LOGGER_BUGSNAG_API_KEY\")) {\n            // eslint-disable-next-line no-console\n            console.log(\"[ LOGGER ] - There is no LOGGER_BUGSNAG_API_KEY variable in the .env file \");\n        } else {\n            logger.add(new BugsnagTransport({ level: \"error\" }));\n            $.set(\"bugsnagexpress\",\n                Bugsnag.getPlugin(\"express\")\n            );\n        }\n        $.set(\n            \"logger\",\n            logger\n        );\n    } catch (e) {\n        // eslint-disable-next-line no-console\n        console.log(`[ Logger ] - ${e.message}`);\n    }\n};\n"],"file":"index.js"}