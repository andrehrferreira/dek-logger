{"version":3,"sources":["../src/index.js"],"names":["BugsnagTransport","opts","silent","level","Bugsnag","start","apiKey","process","env","LOGGER_BUGSNAG_API_KEY","plugins","BugsnagPluginExpress","info","callback","setImmediate","emit","Error","notify","message","Transport","Object","prototype","hasOwnProperty","call","logger","winston","createLogger","format","json","transports","NODE_ENV","add","Console","simple","$","set","getPlugin","e","console","log"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAEMA,gB;;;;;AACF,4BAAYC,IAAZ,EAAkB;AAAA;;AAAA;;AACd,8BAAMA,IAAN;AAEA,UAAKC,MAAL,GAAcD,IAAI,IAAIA,IAAI,CAACC,MAAb,IAAuB,KAArC;AACA,UAAKC,KAAL,GAAaF,IAAI,IAAIA,IAAI,CAACE,KAAb,IAAsB,OAAnC;;AAEAC,mBAAQC,KAAR,CAAc;AACVC,MAAAA,MAAM,EAAEC,OAAO,CAACC,GAAR,CAAYC,sBADV;AAEVC,MAAAA,OAAO,EAAE,CAACC,yBAAD;AAFC,KAAd;;AANc;AAUjB;;;;wBAEIC,I,EAAMC,Q,EAAU;AAAA;;AAEjBC,MAAAA,YAAY,CAAC;AAAA,eAAM,MAAI,CAACC,IAAL,CAAU,QAAV,EAAoBH,IAApB,CAAN;AAAA,OAAD,CAAZ;;AAEA,UAAI,KAAKV,MAAT,EAAiB;AACb,YAAI,OAAOW,QAAP,IAAmB,UAAvB,EAAmC,OAAOA,QAAQ,EAAf;AACnC;AACH;;AAED,UAAGD,IAAI,YAAYI,KAAnB,EACIZ,eAAQa,MAAR,CAAeL,IAAf,EADJ,KAEK,IAAG,OAAOA,IAAI,CAACM,OAAZ,IAAuB,QAA1B,EACDd,eAAQa,MAAR,CAAe,IAAID,KAAJ,CAAUJ,IAAI,CAACM,OAAf,CAAf;AAEJ,UAAI,OAAOL,QAAP,IAAmB,UAAvB,EAAmC,OAAOA,QAAQ,EAAf;AAEnC;AACH;;;;EA9B0BM,4B;;oFAiChB;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,cAAI;AACA,gBACI,CAACC,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CACGhB,OAAO,CAACC,GADX,EAEG,wBAFH,CADL,EAKE,CACE;;AACA;;;AAGH,aAVD,MAWK;AACKgB,cAAAA,MADL,GACcC,oBAAQC,YAAR,CAAqB;AAChCvB,gBAAAA,KAAK,EAAE,MADyB;AAEhCwB,gBAAAA,MAAM,EAAEF,oBAAQE,MAAR,CAAeC,IAAf,EAFwB;AAGhCC,gBAAAA,UAAU,EAAE,CACR,IAAI7B,gBAAJ,CAAqB;AAAEG,kBAAAA,KAAK,EAAE;AAAT,iBAArB,CADQ;AAHoB,eAArB,CADd;;AASD,kBAAII,OAAO,CAACC,GAAR,CAAYsB,QAAZ,KAAyB,YAA7B,EAA2C;AACvCN,gBAAAA,MAAM,CAACO,GAAP,CAAW,IAAIN,oBAAQI,UAAR,CAAmBG,OAAvB,CAA+B;AACtCL,kBAAAA,MAAM,EAAEF,oBAAQE,MAAR,CAAeM,MAAf;AAD8B,iBAA/B,CAAX;AAGH;;AAEDC,uBAAEC,GAAF,CACI,QADJ,EAEIX,MAFJ;;AAKAU,uBAAEC,GAAF,CAAM,gBAAN,EACI/B,eAAQgC,SAAR,CAAkB,SAAlB,CADJ;AAGH;AACJ,WApCD,CAoCE,OAAOC,CAAP,EAAU;AACR;AACAC,YAAAA,OAAO,CAACC,GAAR,wBAA4BF,CAAC,CAACnB,OAA9B;AACH;;AAxCU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C","sourcesContent":["import winston from \"winston\";\nimport Bugsnag from \"@bugsnag/js\";\nimport Transport from \"winston-transport\";\nimport BugsnagPluginExpress from \"@bugsnag/plugin-express\";\nimport { $ } from \"@dekproject/scope\";\n\nclass BugsnagTransport extends Transport {\n    constructor(opts) {\n        super(opts);\n\n        this.silent = opts && opts.silent || false;\n        this.level = opts && opts.level || \"silly\";\n\n        Bugsnag.start({\n            apiKey: process.env.LOGGER_BUGSNAG_API_KEY,\n            plugins: [BugsnagPluginExpress]\n        });\n    }\n    \n    log (info, callback) {\n\n        setImmediate(() => this.emit(\"logged\", info));\n\n        if (this.silent) {\n            if (typeof callback == \"function\") return callback();\n            return;\n        }\n\n        if(info instanceof Error) \n            Bugsnag.notify(info);\n        else if(typeof info.message == \"string\") \n            Bugsnag.notify(new Error(info.message));\n        \n        if (typeof callback == \"function\") return callback();\n\n        return;\n    }\n}\n\nexport default async () => {\n    try {\n        if (\n            !Object.prototype.hasOwnProperty.call(\n                process.env,\n                \"LOGGER_BUGSNAG_API_KEY\"\n            )\n        ) {\n            // eslint-disable-next-line no-console\n            /*console.log(\n                \"[ LOGGER ] - There is no LOGGER_BUGSNAG_API_KEY variable in the .env file.\"\n            );*/\n        } \n        else {\n            const logger = winston.createLogger({\n                level: \"info\",\n                format: winston.format.json(),\n                transports: [\n                    new BugsnagTransport({ level: \"error\" })\n                ]\n            });\n         \n            if (process.env.NODE_ENV !== \"production\") {\n                logger.add(new winston.transports.Console({\n                    format: winston.format.simple()\n                }));\n            }\n\n            $.set(\n                \"logger\",\n                logger\n            );\n\n            $.set(\"bugsnagexpress\",\n                Bugsnag.getPlugin(\"express\")\n            );\n        }\n    } catch (e) {\n        // eslint-disable-next-line no-console\n        console.log(`[ Logger ] - ${e.message}`);\n    }\n};\n"],"file":"index.js"}