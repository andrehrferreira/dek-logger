{"version":3,"sources":["../src/index.js"],"names":["BugsnagTransport","opts","silent","level","Bugsnag","start","apiKey","process","env","LOGGER_BUGSNAG_API_KEY","plugins","BugsnagPluginExpress","info","callback","setImmediate","emit","Error","notify","message","Transport","logger","winston","createLogger","format","combine","colorize","timestamp","printf","addColors","error","warn","debug","NODE_ENV","add","transports","Console","simple","consoleWarnLevels","Object","prototype","hasOwnProperty","call","$","set","getPlugin","e","console","log"],"mappings":"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","sourcesContent":["import winston from \"winston\";\r\nimport Bugsnag from \"@bugsnag/js\";\r\nimport Transport from \"winston-transport\";\r\nimport BugsnagPluginExpress from \"@bugsnag/plugin-express\";\r\nimport { $ } from \"@dekproject/scope\";\r\n\r\nclass BugsnagTransport extends Transport {\r\n    constructor(opts) {\r\n        super(opts);\r\n\r\n        this.silent = opts && opts.silent || false;\r\n        this.level = opts && opts.level || \"silly\";\r\n\r\n        Bugsnag.start({\r\n            apiKey: process.env.LOGGER_BUGSNAG_API_KEY,\r\n            plugins: [BugsnagPluginExpress]\r\n        });\r\n    }\r\n    \r\n    log (info, callback) {\r\n\r\n        setImmediate(() => this.emit(\"logged\", info));\r\n\r\n        if (this.silent) {\r\n            if (typeof callback == \"function\") return callback();\r\n            return;\r\n        }\r\n\r\n        if(info instanceof Error) \r\n            Bugsnag.notify(info);\r\n        else if(typeof info.message == \"string\") \r\n            Bugsnag.notify(new Error(info.message));\r\n        \r\n        if (typeof callback == \"function\") return callback();\r\n\r\n        return;\r\n    }\r\n}\r\n\r\nexport default async () => {\r\n    try {\r\n        let logger = winston.createLogger({\r\n            level: \"info\",\r\n            format: winston.format.combine(\r\n                winston.format.colorize(),\r\n                winston.format.timestamp(),\r\n                winston.format.printf(info => `${info.timestamp} [${info.level}]: ${info.message}`),\r\n            )\r\n        });\r\n\r\n        winston.addColors({\r\n            error: \"red\",\r\n            warn: \"yellow\",\r\n            info: \"cyan\",\r\n            debug: \"green\"\r\n        });                \r\n\r\n        if (process.env.NODE_ENV == \"production\") {\r\n            logger.add(new winston.transports.Console({\r\n                format: winston.format.simple(),\r\n                consoleWarnLevels: [\"warn\", \"info\", \"error\"]\r\n            }));\r\n        }\r\n        else {\r\n            logger.add(new winston.transports.Console({\r\n                format: winston.format.colorize(),\r\n                level: \"debug\"\r\n            }));\r\n        }\r\n\r\n        if (!Object.prototype.hasOwnProperty.call(process.env, \"LOGGER_BUGSNAG_API_KEY\")) {\r\n            $.set(\"logger\", logger);\r\n        } \r\n        else {\r\n            const logger = winston.createLogger({\r\n                level: \"info\",\r\n                format: winston.format.combine(\r\n                    winston.format.colorize(),\r\n                    winston.format.timestamp(),\r\n                    winston.format.printf(info => `${info.timestamp} [${info.level}]: ${info.message}`),\r\n                ),\r\n                transports: [\r\n                    new BugsnagTransport({ level: \"error\" })\r\n                ]\r\n            });\r\n         \r\n            if (process.env.NODE_ENV !== \"production\") {\r\n                logger.add(new winston.transports.Console({\r\n                    format: winston.format.colorize()\r\n                }));\r\n            }\r\n\r\n            $.set(\"logger\", logger);\r\n            $.set(\"bugsnagexpress\", Bugsnag.getPlugin(\"express\"));\r\n        }\r\n    } \r\n    catch (e) {\r\n        // eslint-disable-next-line no-console\r\n        console.log(`[ Logger ] - ${e.message}`);\r\n    }\r\n};\r\n"],"file":"index.js"}