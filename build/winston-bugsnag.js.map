{"version":3,"file":"winston-bugsnag.js","sourceRoot":"","sources":["../src/winston-bugsnag.ts"],"names":[],"mappings":";;;AAAA,2DAAiC;AACjC,gFAAyC;AAczC;IAA8C,4CAAS;IAInD,0BAAY,IAA8B;QAA1C,YACI,kBAAM,IAAI,CAAC,SAGd;QAPM,YAAM,GAAG,KAAK,CAAC;QACf,WAAK,GAAG,OAAO,CAAC;QAInB,KAAI,CAAC,MAAM,GAAG,IAAI,IAAI,IAAI,CAAC,MAAM,IAAI,KAAK,CAAC;QAC3C,KAAI,CAAC,KAAK,GAAG,IAAI,IAAI,IAAI,CAAC,KAAK,IAAI,OAAO,CAAC;;IAC/C,CAAC;IAEM,8BAAG,GAAV,UAAW,IAAS,EAAE,QAAoB;QAA1C,iBAkBC;QAjBG,YAAY,CAAC,cAAM,OAAA,KAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,EAAzB,CAAyB,CAAC,CAAC;QAC9C,IAAI,IAAI,CAAC,MAAM;YAAE,OAAO,QAAQ,EAAE,CAAC;QAEnC,IAAM,YAAY,GAA6C;YAC3D,KAAK,EAAE,MAAM;YACb,KAAK,EAAE,OAAO;YACd,IAAI,EAAE,MAAM;YACZ,KAAK,EAAE,MAAM;YACb,OAAO,EAAE,MAAM;YACf,IAAI,EAAE,SAAS;SAClB,CAAA;QACO,IAAA,sBAAO,EAAE,yBAAmB,CAAU;QAE9C,YAAO,CAAC,MAAM,CAAC,OAAO,EAAE,UAAU,KAAK;YACnC,KAAK,CAAC,QAAQ,GAAG,YAAY,CAAC,YAA+B,CAAC,CAAA;QAClE,CAAC,CAAC,CAAA;QACF,OAAO,QAAQ,EAAE,CAAC;IACtB,CAAC;IACL,uBAAC;AAAD,CAAC,AA7BD,CAA8C,2BAAS,GA6BtD","sourcesContent":["import Bugsnag from '@bugsnag/js'\nimport Transport from 'winston-transport'\nexport type BugsnagLogLevel = 'info' | 'error' | 'warning'\nexport type WinstonLogLevel = 'error' | 'warn' | 'info' | 'verbose' | 'debug' | 'silly'\n\nexport type Meta = object & {\n    userId?: string\n}\n\nexport interface BugsnagTransportOptions extends Transport.TransportStreamOptions {\n    express?: boolean;\n    level: \"silly\",\n    silent?: boolean\n}\n\nexport default class BugsnagTransport extends Transport {\n    public silent = false;\n    public level = \"silly\";\n\n    constructor(opts?: BugsnagTransportOptions) {\n        super(opts)\n        this.silent = opts && opts.silent || false;\n        this.level = opts && opts.level || \"silly\";\n    }\n\n    public log(info: any, callback: () => void): any {\n        setImmediate(() => this.emit('logged', info));\n        if (this.silent) return callback();\n\n        const levelMapping: Record<WinstonLogLevel, BugsnagLogLevel> = {\n            debug: 'info',\n            error: 'error',\n            info: 'info',\n            silly: 'info',\n            verbose: 'info',\n            warn: 'warning'\n        }\n        const { message, level: winstonLevel } = info;\n\n        Bugsnag.notify(message, function (event) {\n            event.severity = levelMapping[winstonLevel as WinstonLogLevel]\n        })\n        return callback();\n    }\n}"]}